
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const huggingFaceApiKey = Deno.env.get('HUGGING_FACE_ACCESS_TOKEN');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// T·∫°o h·ªá th·ªëng tr·∫£ l·ªùi th√¥ng minh d·ª±a tr√™n t·ª´ kh√≥a
const generateSmartResponse = (message: string, conversationHistory: any[]): string => {
  const lowerMessage = message.toLowerCase();
  
  // Ph√¢n t√≠ch lo·∫°i c√¢u h·ªèi v√† tr·∫£ l·ªùi ph√π h·ª£p
  if (lowerMessage.includes('ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
    return "Xin ch√†o! T√¥i l√† Midonaka, tr·ª£ l√Ω AI chuy√™n v·ªÅ c√¢y c·∫£nh c·ªßa shop Midoni. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t∆∞ v·∫•n v·ªÅ c√°c lo·∫°i c√¢y, c√°ch chƒÉm s√≥c, v√† s·∫£n ph·∫©m c·ªßa shop. B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ c√¢y c·∫£nh nh√©? üå±";
  }
  
  if (lowerMessage.includes('sen ƒë√°') || lowerMessage.includes('succulent')) {
    if (lowerMessage.includes('t∆∞·ªõi') || lowerMessage.includes('n∆∞·ªõc')) {
      return "Sen ƒë√° c·∫ßn t∆∞·ªõi n∆∞·ªõc √≠t v√† kh√¥ng th∆∞·ªùng xuy√™n:\n\nüåµ **M√πa h√®**: 1-2 l·∫ßn/tu·∫ßn\nüçÇ **M√πa ƒë√¥ng**: 2-3 tu·∫ßn/l·∫ßn\n\n**C√°ch t∆∞·ªõi ƒë√∫ng**:\n- T∆∞·ªõi khi ƒë·∫•t kh√¥ ho√†n to√†n\n- T∆∞·ªõi th·∫•m ƒë·ªÅu r·ªìi ƒë·ªÉ r√°o\n- Tr√°nh ƒë·ªÉ n∆∞·ªõc ƒë·ªçng ·ªü g·ªëc\n- T∆∞·ªõi v√†o bu·ªïi s√°ng s·ªõm\n\nB·∫°n c√≥ mu·ªën bi·∫øt th√™m v·ªÅ c√°ch chƒÉm s√≥c sen ƒë√° kh√¥ng?";
    }
    
    if (lowerMessage.includes('√°nh s√°ng') || lowerMessage.includes('n·∫Øng')) {
      return "Sen ƒë√° r·∫•t th√≠ch √°nh s√°ng! ‚òÄÔ∏è\n\n**Y√™u c·∫ßu √°nh s√°ng**:\n- C·∫ßn 6-8 ti·∫øng √°nh s√°ng/ng√†y\n- √Ånh s√°ng gi√°n ti·∫øp, tr√°nh n·∫Øng tr·ª±c ti·∫øp\n- ƒê·∫∑t g·∫ßn c·ª≠a s·ªï h∆∞·ªõng ƒê√¥ng ho·∫∑c T√¢y\n- N·∫øu thi·∫øu s√°ng, c√¢y s·∫Ω v∆∞∆°n d√†i v√† y·∫øu\n\n**D·∫•u hi·ªáu thi·∫øu s√°ng**: C√¢y v∆∞∆°n cao, l√° nh·∫°t m√†u\n**D·∫•u hi·ªáu qu√° n·∫Øng**: L√° b·ªã ch√°y, n√¢u ƒë·ªè\n\nB·∫°n c·∫ßn t∆∞ v·∫•n th√™m v·ªÅ v·ªã tr√≠ ƒë·∫∑t c√¢y kh√¥ng?";
    }
    
    return "Sen ƒë√° l√† lo·∫°i c√¢y r·∫•t d·ªÖ chƒÉm! üåµ\n\n**ƒê·∫∑c ƒëi·ªÉm**:\n- T√≠ch tr·ªØ n∆∞·ªõc trong l√°\n- Ch·ªãu h·∫°n t·ªët\n- Ph√π h·ª£p ƒë·ªÉ b√†n l√†m vi·ªác\n\n**C√°ch chƒÉm s√≥c c∆° b·∫£n**:\n‚úÖ T∆∞·ªõi √≠t, kho·∫£ng 1-2 l·∫ßn/tu·∫ßn\n‚úÖ ƒê·∫∑t n∆°i c√≥ √°nh s√°ng gi√°n ti·∫øp\n‚úÖ ƒê·∫•t tho√°t n∆∞·ªõc t·ªët\n‚úÖ Nhi·ªát ƒë·ªô 18-24¬∞C\n\nB·∫°n mu·ªën bi·∫øt c·ª• th·ªÉ v·ªÅ t∆∞·ªõi n∆∞·ªõc, √°nh s√°ng hay c√°c v·∫•n ƒë·ªÅ kh√°c?";
  }
  
  if (lowerMessage.includes('c√¢y trong nh√†') || lowerMessage.includes('c√¢y n·ªôi th·∫•t')) {
    return "Tuy·ªát! C√¢y trong nh√† gi√∫p kh√¥ng gian s·ªëng t∆∞∆°i m√°t h∆°n üè†üåø\n\n**Top c√¢y d·ªÖ chƒÉm cho ng∆∞·ªùi m·ªõi**:\nüå± **C√¢y l∆∞·ª°i h·ªï**: Ch·ªãu thi·∫øu s√°ng, t∆∞·ªõi √≠t\nüå± **C√¢y kim ti·ªÅn**: May m·∫Øn, d·ªÖ s·ªëng\nüå± **C√¢y tr·∫ßu b√†**: L·ªçc kh√¥ng kh√≠ t·ªët\nüå± **Sen ƒë√° mini**: Xinh x·∫Øn, √≠t chƒÉm s√≥c\n\n**L·ª£i √≠ch**:\n‚ú® L·ªçc kh√¥ng kh√≠\n‚ú® TƒÉng ƒë·ªô ·∫©m\n‚ú® Gi·∫£m stress\n‚ú® Trang tr√≠ ƒë·∫πp\n\nB·∫°n mu·ªën t∆∞ v·∫•n lo·∫°i c√¢y n√†o ph√π h·ª£p v·ªõi kh√¥ng gian nh√† b·∫°n?";
  }
  
  if (lowerMessage.includes('t∆∞·ªõi n∆∞·ªõc') || lowerMessage.includes('t∆∞·ªõi c√¢y')) {
    return "T∆∞·ªõi n∆∞·ªõc ƒë√∫ng c√°ch r·∫•t quan tr·ªçng! üíß\n\n**Nguy√™n t·∫Øc chung**:\nüå± **Ki·ªÉm tra ƒë·∫•t**: ƒê√∫t ng√≥n tay xu·ªëng ƒë·∫•t 2-3cm\nüå± **T∆∞·ªõi khi kh√¥**: ƒê·∫•t kh√¥ m·ªõi t∆∞·ªõi\nüå± **T∆∞·ªõi th·∫•m**: Cho ƒë·∫øn khi n∆∞·ªõc ch·∫£y ra l·ªó tho√°t\nüå± **Th·ªùi gian**: S√°ng s·ªõm ho·∫∑c chi·ªÅu m√°t\n\n**D·∫•u hi·ªáu t∆∞·ªõi sai**:\n‚ùå L√° v√†ng, r·ª•ng: T∆∞·ªõi qu√° nhi·ªÅu\n‚ùå L√° h√©o, kh√¥: T∆∞·ªõi qu√° √≠t\n‚ùå R·ªÖ th·ªëi: ƒê·ªçng n∆∞·ªõc\n\nB·∫°n ƒëang g·∫∑p v·∫•n ƒë·ªÅ g√¨ v·ªõi vi·ªác t∆∞·ªõi c√¢y?";
  }
  
  if (lowerMessage.includes('ph√¢n b√≥n') || lowerMessage.includes('b√≥n ph√¢n')) {
    return "B√≥n ph√¢n gi√∫p c√¢y ph√°t tri·ªÉn kh·ªèe m·∫°nh! üåø\n\n**Lo·∫°i ph√¢n**:\nüü¢ **Ph√¢n h·ªØu c∆°**: An to√†n, t·ª´ t·ª´\nüîµ **Ph√¢n NPK**: Hi·ªáu qu·∫£ nhanh\nüü° **Ph√¢n l√°**: B·ªï sung vi l∆∞·ª£ng\n\n**T·∫ßn su·∫•t b√≥n**:\n- **M√πa sinh tr∆∞·ªüng** (3-9): 2 tu·∫ßn/l·∫ßn\n- **M√πa ngh·ªâ** (10-2): 1 th√°ng/l·∫ßn ho·∫∑c kh√¥ng b√≥n\n\n**L∆∞u √Ω**:\n‚ö†Ô∏è Kh√¥ng b√≥n khi c√¢y ·ªëm\n‚ö†Ô∏è Pha lo√£ng theo h∆∞·ªõng d·∫´n\n‚ö†Ô∏è B√≥n sau khi t∆∞·ªõi n∆∞·ªõc\n\nB·∫°n mu·ªën bi·∫øt c√°ch b√≥n ph√¢n cho lo·∫°i c√¢y n√†o?";
  }
  
  if (lowerMessage.includes('s√¢u b·ªánh') || lowerMessage.includes('c√¥n tr√πng') || lowerMessage.includes('r·ªáp')) {
    return "Ph√≤ng ch·ªëng s√¢u b·ªánh quan tr·ªçng l·∫Øm! üêõ\n\n**S√¢u b·ªánh th∆∞·ªùng g·∫∑p**:\nüî¥ **R·ªáp xanh**: H√∫t nh·ª±a c√¢y\nüî¥ **Nh·ªán ƒë·ªè**: L√° c√≥ ƒë·ªëm v√†ng\nüî¥ **B·ªç trƒ©**: ƒÇn l√°\nüî¥ **N·∫•m**: ƒê·ªëm ƒëen tr√™n l√°\n\n**C√°ch ph√≤ng ng·ª´a**:\n‚úÖ Gi·ªØ c√¢y s·∫°ch s·∫Ω\n‚úÖ Th√¥ng gi√≥ t·ªët\n‚úÖ Kh√¥ng t∆∞·ªõi l√™n l√°\n‚úÖ C√°ch ly c√¢y m·ªõi\n\n**X·ª≠ l√Ω t·ª± nhi√™n**:\nüåø X√† ph√≤ng + n∆∞·ªõc\nüåø D·∫ßu neem\nüåø C·∫Øt b·ªè ph·∫ßn b·ªã b·ªánh\n\nB·∫°n th·∫•y d·∫•u hi·ªáu g√¨ tr√™n c√¢y?";
  }
  
  if (lowerMessage.includes('gi√°') || lowerMessage.includes('mua') || lowerMessage.includes('b√°n')) {
    return "Shop Midoni c√≥ nhi·ªÅu lo·∫°i c√¢y v·ªõi gi√° ph√π h·ª£p! üí∞\n\n**T·∫ßm gi√° tham kh·∫£o**:\nüå± **C√¢y mini**: 50.000 - 150.000ƒë\nüåø **C√¢y trung**: 200.000 - 500.000ƒë\nüå≥ **C√¢y l·ªõn**: 600.000 - 2.000.000ƒë\n\n**∆Øu ƒë√£i hi·ªán t·∫°i**:\nüéÅ Mi·ªÖn ph√≠ giao h√†ng t·ª´ 500.000ƒë\nüéÅ T∆∞ v·∫•n chƒÉm s√≥c mi·ªÖn ph√≠\nüéÅ ƒê·ªïi c√¢y trong 7 ng√†y n·∫øu c√≥ v·∫•n ƒë·ªÅ\n\n**Xem s·∫£n ph·∫©m**: B·∫°n c√≥ th·ªÉ xem chi ti·∫øt tr√™n trang Products\n\nB·∫°n quan t√¢m lo·∫°i c√¢y n√†o ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ?";
  }
  
  // Ph·∫£n h·ªìi chung cho c√°c c√¢u h·ªèi kh√°c
  const responses = [
    `C√¢u h·ªèi hay qu√°! V·ªÅ "${message}", t√¥i nghƒ© b·∫°n n√™n bi·∫øt r·∫±ng m·ªói lo·∫°i c√¢y c√≥ ƒë·∫∑c ƒëi·ªÉm ri√™ng. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m chi ti·∫øt ƒë·ªÉ t√¥i t∆∞ v·∫•n ch√≠nh x√°c h∆°n kh√¥ng?`,
    
    `T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn "${message}". V·ªõi kinh nghi·ªám t∆∞ v·∫•n c√¢y c·∫£nh, t√¥i th·∫•y ƒëi·ªÅu quan tr·ªçng nh·∫•t l√† hi·ªÉu r√µ nhu c·∫ßu c·ªßa t·ª´ng lo·∫°i c√¢y. B·∫°n c√≥ mu·ªën t√¥i gi·∫£i th√≠ch c·ª• th·ªÉ h∆°n kh√¥ng?`,
    
    `V·ªÅ v·∫•n ƒë·ªÅ "${message}" m√† b·∫°n h·ªèi, ƒë√¢y l√† m·ªôt ch·ªß ƒë·ªÅ th√∫ v·ªã trong chƒÉm s√≥c c√¢y c·∫£nh! M·ªói lo·∫°i c√¢y c√≥ y√™u c·∫ßu kh√°c nhau. B·∫°n ƒëang chƒÉm s√≥c lo·∫°i c√¢y n√†o v·∫≠y?`,
    
    `C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ "${message}". T√¥i r·∫•t vui ƒë∆∞·ª£c chia s·∫ª ki·∫øn th·ª©c v·ªÅ c√¢y c·∫£nh! ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng ·ªü nh√† b·∫°n kh√¥ng?`
  ];
  
  // Ch·ªçn ph·∫£n h·ªìi d·ª±a tr√™n ƒë·ªô d√†i tin nh·∫Øn
  const responseIndex = message.length % responses.length;
  return responses[responseIndex];
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Chat function called');
    
    const { message, conversationHistory = [] } = await req.json();
    console.log('Request data:', { message, historyLength: conversationHistory.length });

    if (!message) {
      throw new Error('Message is required');
    }

    let reply = '';

    if (huggingFaceApiKey) {
      console.log('Using Hugging Face API with token...');
      
      // T·∫°o context chuy√™n s√¢u v·ªÅ c√¢y c·∫£nh
      let context = `B·∫°n l√† Midonaka, chuy√™n gia t∆∞ v·∫•n c√¢y c·∫£nh c·ªßa shop Midoni. 
B·∫°n c√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ:
- C√°c lo·∫°i c√¢y c·∫£nh trong nh√† v√† ngo√†i tr·ªùi
- C√°ch chƒÉm s√≥c, t∆∞·ªõi n∆∞·ªõc, b√≥n ph√¢n
- X·ª≠ l√Ω s√¢u b·ªánh, v·∫•n ƒë·ªÅ c√¢y c·ªëi
- T∆∞ v·∫•n ch·ªçn c√¢y ph√π h·ª£p v·ªõi t·ª´ng kh√¥ng gian
- S·∫£n ph·∫©m v√† d·ªãch v·ª• c·ªßa shop Midoni

Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát th√¢n thi·ªán, chuy√™n nghi·ªáp v√† h·ªØu √≠ch.
S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m c√¢u tr·∫£ l·ªùi sinh ƒë·ªông.

L·ªãch s·ª≠ h·ªôi tho·∫°i:\n`;

      conversationHistory.forEach((msg: any) => {
        context += `${msg.role === 'user' ? 'Kh√°ch h√†ng' : 'Midonaka'}: ${msg.content}\n`;
      });
      
      context += `Kh√°ch h√†ng: ${message}\nMidonaka:`;

      const response = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${huggingFaceApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: context,
          parameters: {
            max_length: 500,
            temperature: 0.8,
            do_sample: true,
            top_p: 0.9,
            return_full_text: false
          }
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (Array.isArray(data) && data[0] && data[0].generated_text) {
          reply = data[0].generated_text.trim();
        }
      } else {
        console.log('Hugging Face API failed, using smart fallback');
        reply = generateSmartResponse(message, conversationHistory);
      }
    } else {
      console.log('No API key, using smart response system');
      reply = generateSmartResponse(message, conversationHistory);
    }

    // ƒê·∫£m b·∫£o reply kh√¥ng qu√° d√†i
    if (reply.length > 800) {
      reply = reply.substring(0, 800) + "...";
    }

    // N·∫øu reply tr·ªëng ho·∫∑c kh√¥ng ph√π h·ª£p, d√πng fallback
    if (!reply || reply.length < 10) {
      reply = generateSmartResponse(message, conversationHistory);
    }

    console.log('AI reply generated successfully');

    return new Response(JSON.stringify({ reply }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in chat-with-ai function:', error);
    
    // Fallback th√¥ng minh khi c√≥ l·ªói
    const { message } = await req.json();
    const fallbackReply = generateSmartResponse(message || "xin ch√†o", []);
    
    return new Response(JSON.stringify({ reply: fallbackReply }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
